name: CI
on: [push]

jobs:
  build:
    name: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-go@v4
        with:
          go-version: 1.21.3
      - uses: actions/checkout@v4
      - name: Build the project
        run: make build_local

  golangci-lint:
    name: lint
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v4
        with:
          go-version: 1.21.3
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: -c configs/.golangci.yaml

  docker-push-api:
    name: Build and push api
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/api/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cyberbed-api:latest

  docker-push-notifications:
    name: Build and push notifications
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./containers/notifications/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/cyberbed-notifications:latest

  build_and_push:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - name: copy files via ssh secrets
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          source: "containers/docker-compose.yaml, configs/, migrations/"
          target: "backend"
          rm: true
      - name: executing remote ssh commands using ssh key
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_KEY }}
          script: |
            docker exec -i postgresql /bin/bash -c "pg_dump --username postgres cyber_garden" > ~/backup/dump.sql
            docker rm -f $(docker ps -aq)

            export RECOGNIZE_API_TOKEN=${{ secrets.RECOGNIZE_API_TOKEN }}
            export TREFLE_API_TOKEN=${{ secrets.TREFLE_API_TOKEN }}
            export PERENUAL_API_TOKEN=${{ secrets.PERENUAL_API_TOKEN }}
            echo 'RECOGNIZE_API_TOKEN=$RECOGNIZE_API_TOKEN\nTREFLE_API_TOKEN=$TREFLE_API_TOKEN\nPERENUAL_API_TOKEN=$PERENUAL_API_TOKEN' > ~/backend/.env.prod

            cd ~/backend/containers
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/cyberbed-api
            docker pull ${{ secrets.DOCKERHUB_USERNAME }}/cyberbed-notifications
            docker compose up -d
